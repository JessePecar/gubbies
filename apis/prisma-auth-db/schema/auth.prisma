model Application {
  id         Int    @id @default(autoincrement())
  name       String
  domain     String
  // Access Code is a guid that will identify the application calling this api
  // This is passed in the header and if not provided, or invalid, we will return `419: Invalid Application Origin`
  accessCode String

  users User[]
}

model Chain {
  id Int @id @unique @default(autoincrement())

  // Chain level permissions

  stores Store[]
}

// If the chain has multiple different types of stores, we will want to differentiate them here
// Store types will be set in the chain settings and we can have reasons hidden based on type 
model StoreType {
  code  String  @id @unique
  name  String
  store Store[]
}

model Store {
  id        Int     @id @unique @default(autoincrement())
  name      String
  typeCode  String
  isDeleted Boolean
  isActive  Boolean

  // Store integration information to external services

  phoneId   Int @unique
  addressId Int @unique
  chainId   Int

  address          Address           @relation(fields: [addressId], references: [id])
  phone            Phone             @relation(fields: [phoneId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  storeType        StoreType         @relation(fields: [typeCode], references: [code])
  chain            Chain             @relation(fields: [chainId], references: [id])
  storeDepartments StoreDepartment[]
}

model Department {
  code String @id
  name String

  // Department related flags / information
  phoneId Int @unique

  phone            Phone             @relation(fields: [phoneId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  storeDepartments StoreDepartment[]
}

model StoreDepartment {
  departmentCode String
  storeId        Int

  department Department @relation(fields: [departmentCode], references: [code], onDelete: Cascade, onUpdate: NoAction)
  store      Store      @relation(fields: [storeId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([departmentCode, storeId])
}

model Phone {
  id             Int    @id @default(autoincrement())
  rawDigits      String
  nationalDigits String

  user        User?
  store       Store?
  departments Department?
}

model Address {
  id          Int     @id @unique @default(autoincrement())
  address1    String
  address2    String?
  state       String
  city        String
  countryCode String
  postalCode  Int

  user  User?
  store Store?
}

model User {
  id               Int     @id @default(autoincrement())
  firstName        String?
  lastName         String?
  roleId           Int
  primaryPhoneId   Int?    @unique
  addressId        Int?    @unique
  isActive         Boolean @default(true)
  emailAddress     String?
  applicationId    Int     @default(0)
  // If the role is operating the app in an enterprise capacity
  // Enterprise mode will make changes to all stores, this will probably have to be a separate app that they are changed to 
  isEnterpriseMode Boolean @default(false)

  role         Role        @relation(fields: [roleId], references: [id])
  primaryPhone Phone?      @relation(fields: [primaryPhoneId], references: [id])
  address      Address?    @relation(fields: [addressId], references: [id])
  application  Application @relation(fields: [applicationId], references: [id])
  userLogin    UserLogin   @relation(fields: [id], references: [userId])
  userClaims   UserClaim[]
}

// TODO: Determine if we need to have a composite key for user login if a user could have multiple logins for different applications
model UserLogin {
  username String @unique
  password String
  userId   Int    @id @unique
  // applicationId Int

  user User[]
  // application Application @relation(fields: [applicationId], references: [id])

  //@@id([userId, applicationId]) 
}

model UserClaim {
  code   String
  userId Int
  value  String

  user User @relation(fields: [userId], references: [id])

  @@id([code, userId])
}

model PasswordChange {
  username   String
  token      String   @id
  // applicationId Int
  expiration DateTime
}

model Permission {
  id                Int              @id @default(autoincrement())
  name              String?
  permissionGroupId Int?
  rolePermissions   RolePermission[]
  permissionGroup   PermissionGroup? @relation(fields: [permissionGroupId], references: [id])
}

model PermissionGroup {
  id          Int          @id @default(autoincrement())
  name        String
  permissions Permission[]
}

model Role {
  id              Int              @id @default(autoincrement())
  name            String
  hierarchyTier   Int              @default(1)
  rolePermissions RolePermission[]
  users           User[]
}

model RolePermission {
  roleId       Int
  role         Role       @relation(fields: [roleId], references: [id])
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
}
