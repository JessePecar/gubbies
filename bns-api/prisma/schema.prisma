generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model AdjustmentItems {
  adjustmentId Int
  itemId       Int

  adjustment Adjustments @relation(fields: [adjustmentId], references: [id])
  item       Items       @relation(fields: [itemId], references: [id])

  @@id([adjustmentId, itemId])
}

model Adjustments {
  id           Int       @id @default(autoincrement())
  createDate   DateTime?
  status       Int
  completeDate DateTime?

  adjustmentItems AdjustmentItems[]
}

// Promotions could be created on the Sub Category (rare) or Family level (common), but never Category level
// Categories could have Sub Categories 
model Categories {
  code String  @id
  name String?

  // Can create promotions at a category level
  canPromote Boolean @default(false)

  items         Items[]
  subcategories Subcategory[]
}

// Sub Categories could have Families
model Subcategory {
  code         String  @id
  categoryCode String
  name         String?
  // Can create promotions at a subcategory level
  canPromote   Boolean @default(false)

  category Categories @relation(fields: [categoryCode], references: [code])
  items    Items[]
  families Family[]
}

// A family is under a Sub Category that relates branded items together for promotions 
model Family {
  code            String  @id
  subcategoryCode String
  name            String?
  locationId      Int?
  // Can create promotion at the family level
  canPromote      Boolean @default(false)

  subcategory Subcategory    @relation(fields: [subcategoryCode], references: [code])
  items       Items[]
  location    ShelfLocation? @relation(fields: [locationId], references: [id])
}

// Example Location 9R - Top Middle
model ShelfLocation {
  id      Int       @id @default(autoincrement())
  aisle   Int
  side    ShelfSide
  section String // Not sure what type section should be, going to have it show up as a string
  
  families  Family[]
}

enum ShelfSide {
  RIGHT
  LEFT
}

model Vendor {
  id   Int    @id @default(autoincrement())
  name String
  note String

  primaryPhoneId   Int?
  // Secondary phone for the vendor, users may want two phones to contact vendor (business and point of contact)
  secondaryPhoneId Int?
  addressId        Int?

  primaryPhone   Phone?       @relation(name: "primaryPhone", fields: [primaryPhoneId], references: [id])
  secondaryPhone Phone?       @relation(name: "secondaryPhone", fields: [secondaryPhoneId], references: [id])
  address        Address?     @relation(fields: [addressId], references: [id])
  itemVendors    ItemVendor[]
}

model ItemVendor {
  itemId            Int
  vendorId          Int
  vendorItemId      String // This is the vendor's item id in their system
  cost              Decimal
  canReturn         Boolean @default(true)
  isAutoReplenish   Boolean @default(true)
  isPreferredVendor Boolean @default(false) // If item has no preferred vendor, will use lowest cost
  canPromote        Boolean @default(false)
  reorderQuantity   Decimal @default(0)

  item   Items  @relation(fields: [itemId], references: [id])
  vendor Vendor @relation(fields: [vendorId], references: [id])

  @@id([vendorId, itemId])
}

model Items {
  id                    Int     @id @default(autoincrement())
  name                  String
  categoryCode          String
  subcategoryCode       String?
  fieldCode             String?
  quantityOnHand        String
  basePrice             Decimal
  currentPrice          Decimal
  isActive              Boolean
  retirementStatus      Int
  reorderQuantity       Decimal
  unitOfMeasurementType Int
  vendorId              Int

  adjustmentItems AdjustmentItems[]
  category        Categories        @relation(fields: [categoryCode], references: [code])
  subcategory     Subcategory?      @relation(fields: [subcategoryCode], references: [code])
  family          Family?           @relation(fields: [fieldCode], references: [code])
  itemVendors     ItemVendor[]
}

model Permissions {
  id                Int               @id @default(autoincrement())
  name              String?
  permissionGroupId Int?
  rolePermissions   RolePermissions[]
  PermissionGroup   PermissionGroup?  @relation(fields: [permissionGroupId], references: [id])
}

model PermissionGroup {
  id          Int           @id @default(autoincrement())
  name        String
  permissions Permissions[]
}

model Roles {
  id              Int               @id @default(autoincrement())
  name            String
  hierarchyTier   Int               @default(1)
  rolePermissions RolePermissions[]
  users           Users[]
}

model RolePermissions {
  roleId       Int
  role         Roles       @relation(fields: [roleId], references: [id])
  permissionId Int
  permission   Permissions @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
}

model SequelizeMeta {
  name String @id

  @@ignore
}

model Users {
  id             Int     @id @default(autoincrement())
  firstName      String?
  lastName       String?
  roleId         Int
  primaryPhoneId Int?
  addressId      Int?    @unique
  userName       String?
  password       String?
  isActive       Boolean @default(true)
  emailAddress   String?

  role         Roles    @relation(fields: [roleId], references: [id])
  primaryPhone Phone?   @relation(fields: [primaryPhoneId], references: [id])
  address      Address? @relation(fields: [addressId], references: [id])
}

model Phone {
  id             Int    @id @default(autoincrement())
  rawDigits      String
  nationalDigits String

  users           Users[]
  primaryVendor   Vendor[] @relation(name: "primaryPhone")
  secondaryVendor Vendor[] @relation(name: "secondaryPhone")
}

model Address {
  id          Int     @id @unique @default(autoincrement())
  address1    String
  address2    String?
  state       String
  city        String
  countryCode String
  postalCode  Int

  user    Users?
  vendors Vendor[]
}
