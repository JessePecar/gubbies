type Query {
  items: [Item]
  itemsRequest(request: ReadRequest!): [Item]
  item(id: ID!): Item
}

type Mutation {
  createItem(createItemInput: CreateItemInput): Item
}

type Subscription {
  itemChanged(id: ID!): Item
  itemsChanged: Item
}

interface BaseItem {
  id: Int!
  name: String!
  categoryCode: String!
  quantityOnHand: String
  basePrice: Float!
  currentPrice: Float
  isActive: Boolean!
  retirementStatus: Int!
  reorderQuantity: Float
  unitOfMeasurementType: Int!
}

input CreateItemInput {
  id: Int!
  name: String!
  categoryCode: String!
  quantityOnHand: String
  basePrice: Float!
  currentPrice: Float
  isActive: Boolean!
  retirementStatus: Int!
  reorderQuantity: Float
  unitOfMeasurementType: Int!

  vendors: [CreateItemVendorInput]
}

type Item implements BaseItem {
  id: Int!
  name: String!
  categoryCode: String!
  quantityOnHand: String
  basePrice: Float!
  currentPrice: Float
  isActive: Boolean!
  retirementStatus: Int!
  reorderQuantity: Float
  unitOfMeasurementType: Int!

  # Navigation properties
  adjustmentItems: [AdjustmentItems]
  category: Category
  subcategory: Subcategory
  family: Family
}

type AdjustmentItems {
  adjustmentId: Int!
  itemId: Int!
  adjustment: Adjustment
  item: Item     
}

type Adjustment {
  id: Int! 
  createDate: String
  status: Int!
  completeDate: String
  adjustmentItems: [AdjustmentItems]
}