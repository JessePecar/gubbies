type Query {
  users: [User]
  user(id: ID!): User
  auth(username: String, password: String): User
}

type Mutation {
  createUser(createUserInput: CreateUserInput): User
  updateUser(updateUserInput: UpdateUserInput): User
  createRole(createRoleInput: CreateRoleInput): Role
} 

type Subscription {
  roleCreated: Role # TODO: Determine if this is needed
  usersChanged: User
}

input CreateRoleInput {
  name: String!

  rolePermissions: [CreateRolePermission]
}

input CreateRolePermission {
  permissionId: Int!
}

input CreateUserInput {
  firstName: String
  lastName: String
  roleId: Int!
  userName: String
  password: String
}

input UpdateUserInput {
  id: Int!
  firstName: String
  lastName: String
  roleId: Int!
  userName: String!
  password: String!
  isActive: Boolean
  emailAddress: String

  primaryPhoneId: Int
  primaryPhone: UpdatePhoneInput

  addressId: Int
  address: UpdateAddressInput
}

input UpdatePhoneInput {
  id: Int!

  rawDigits: String!
  nationalDigits: String!
}

input UpdateAddressInput {
  id: Int!

  address1: String!
  address2: String
  state: String!
  city: String!
  countryCode: String!
}

type User {
  id: Int!
  firstName: String
  lastName: String
  roleId: Int!
  primaryPhoneId: Int
  addressId: Int
  userName: String!
  password: String!
  isActive: Boolean
  emailAddress: String

  role: Role!
  primaryPhone: Phone
  address: Address
}

type Role {
  id: Int!
  name: String!

  rolePermissions: [RolePermission]
  users: [User]
}

type RolePermission {
  roleId: Int!
  permissionId: Int!

  permission: Permission!
  role: Role!
}

type Permission {
  id: Int!
  name: PermissionName!

  rolePermissions: [RolePermission]
}

# Using an enum for standard permission names (this will be static data that won't change)
enum PermissionName {
  APPLICATION_LOGIN
  INVENTORY
  INVENTORY_ADJUSTMENTS
  INVENTORY_COUNTS
  PRICING
  PROMOTIONS
  REPORTS
  REPORTS_INVENTORY
  REPORTS_PRICING
  REPORTS_PROMOTIONS
  SETTINGS
}

type Phone {
  id: Int!
  rawDigits: String
  nationalDigits: String

  users: [User]
}

type Address {
  id: Int!
  address1: String!
  address2: String
  state: String!
  city: String!
  countryCode: String!

  user: User
}