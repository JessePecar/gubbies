generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model AdjustmentItems {
  adjustmentId Int
  itemId       Int

  adjustment Adjustments @relation(fields: [adjustmentId], references: [id])
  item       Items       @relation(fields: [itemId], references: [id])

  @@id([adjustmentId, itemId])
}

model Adjustments {
  id           Int       @id @default(autoincrement())
  createDate   DateTime?
  status       Int
  completeDate DateTime?

  adjustmentItems AdjustmentItems[]
}

// Promotions could be created on the Sub Category (rare) or Family level (common), but never Category level
// Categories could have Sub Categories 
model Categories {
  code String  @id
  name String?

  items         Items[]
  subCategories SubCategory[]
}

// Sub Categories could have Families
model SubCategory {
  code         String  @id
  categoryCode String
  name         String?

  category Categories @relation(fields: [categoryCode], references: [code])
  items    Items[]
  families Family[]
}

// A family is under a Sub Category that relates branded items together for promotions 
model Family {
  code            String  @id
  subCategoryCode String
  name            String?

  subCategory SubCategory @relation(fields: [subCategoryCode], references: [code])
  items       Items[]
}

model Items {
  id                    Int     @id @default(autoincrement())
  name                  String
  categoryCode          String
  subCategoryCode       String?
  fieldCode             String?
  quantityOnHand        String
  basePrice             Decimal
  currentPrice          Decimal
  isActive              Boolean
  retirementStatus      Int
  reorderQuantity       Decimal
  unitOfMeasurementType Int

  adjustmentItems AdjustmentItems[]
  category        Categories        @relation(fields: [categoryCode], references: [code])
  subCategory     SubCategory?      @relation(fields: [subCategoryCode], references: [code])
  family          Family?           @relation(fields: [fieldCode], references: [code])
}

model Permissions {
  id              Int               @id @default(autoincrement())
  name            String?
  rolePermissions RolePermissions[]
}

model Roles {
  id              Int               @id @default(autoincrement())
  name            String
  hierarchyTier   Int               @default(1)
  rolePermissions RolePermissions[]
  users           Users[]
}

model RolePermissions {
  roleId       Int
  role         Roles       @relation(fields: [roleId], references: [id])
  permissionId Int
  permission   Permissions @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
}

model SequelizeMeta {
  name String @id

  @@ignore
}

model Users {
  id             Int     @id @default(autoincrement())
  firstName      String?
  lastName       String?
  roleId         Int
  primaryPhoneId Int?
  addressId      Int?    @unique
  userName       String?
  password       String?
  isActive       Boolean @default(true)
  emailAddress   String?

  role         Roles    @relation(fields: [roleId], references: [id])
  primaryPhone Phone?   @relation(fields: [primaryPhoneId], references: [id])
  address      Address? @relation(fields: [addressId], references: [id])
}

model Phone {
  id             Int    @id @default(autoincrement())
  rawDigits      String
  nationalDigits String

  Users Users[]
}

model Address {
  id          Int     @id @unique @default(autoincrement())
  address1    String
  address2    String?
  state       String
  city        String
  countryCode String
  postalCode  Int

  User Users?
}
